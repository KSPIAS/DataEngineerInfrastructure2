# version: '3.8'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.1-python3.9
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    # AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?options=-csearch_path=airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@${AIRFLOW_POSTGRES_HOST}:${AIRFLOW_POSTGRES_PORT}/${AIRFLOW_POSTGRES_DB}?options=-csearch_path=${AIRFLOW_POSTGRES_SCHEMA_CONFIG} #GCP-PostgreSQL
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DAG_FOLDER: /opt/airflow/dags

    POSTGRES_HOST: ${AIRFLOW_POSTGRES_HOST}
    POSTGRES_PORT: ${AIRFLOW_POSTGRES_PORT}
    POSTGRES_USER: ${AIRFLOW_POSTGRES_USER}
    POSTGRES_PASSWORD: ${AIRFLOW_POSTGRES_PASSWORD}
    POSTGRES_DB: ${AIRFLOW_POSTGRES_DB}
    POSTGRES_SCHEMA: ${AIRFLOW_POSTGRES_SCHEMA}

    WEATHER_API_KEY: ${WEATHER_API_KEY}
    CITY: ${CITY}
    WEATHER_API_URL: ${WEATHER_API_URL}

    #Telegram Bot
    TG_BOT_TOKEN: ${TG_BOT_TOKEN}
    TG_CHAT_ID: ${TG_CHAT_ID}

  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./scripts:/opt/airflow/scripts
    - ./utils:/opt/airflow/utils
  depends_on:
    - postgres

services:
  postgres:
    image: postgres:14
    container_name: weather_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      # - "5435:5432"
      - "5432:5432" #GCP-PostgreSQL
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./sql/init_schema.sql:/docker-entrypoint-initdb.d/init_schema.sql
    restart: always
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: always

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - postgres
    restart: always

volumes:
  pgdata:
  grafana-storage:
