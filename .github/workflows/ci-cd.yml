name: CI + E2E Pipeline + CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  #CI + E2E
  test:
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: ${{secrets.POSTGRES_USER}}
      POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
      POSTGRES_DB: ${{secrets.POSTGRES_DB}}

    # services:
    #   postgres:
    #     image: postgres:14
    #     env:
    #       POSTGRES_USER: ${{secrets.POSTGRES_USER}}
    #       POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
    #       POSTGRES_DB: ${{secrets.POSTGRES_DB}}
    #     ports:
    #       - 5432:5432 #GCP-PostgreSQL
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create .env file from GitHub Secrets
      run: |
        echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> .env
        echo "WEATHER_API_URL=${{ secrets.WEATHER_API_URL }}" >> .env
        echo "CITY=${{ secrets.CITY }}" >> .env
        echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
        echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "POSTGRES_SCHEMA=${{ secrets.POSTGRES_SCHEMA }}" >> .env
        echo "AIRFLOW_POSTGRES_HOST=${{ secrets.AIRFLOW_POSTGRES_HOST }}" >> .env
        echo "AIRFLOW_POSTGRES_PORT=${{ secrets.AIRFLOW_POSTGRES_PORT }}" >> .env
        echo "AIRFLOW_POSTGRES_USER=${{ secrets.AIRFLOW_POSTGRES_USER }}" >> .env
        echo "AIRFLOW_POSTGRES_PASSWORD=${{ secrets.AIRFLOW_POSTGRES_PASSWORD }}" >> .env
        echo "AIRFLOW_POSTGRES_DB=${{ secrets.AIRFLOW_POSTGRES_DB }}" >> .env
        echo "AIRFLOW_POSTGRES_SCHEMA=${{ secrets.AIRFLOW_POSTGRES_SCHEMA }}" >> .envแ
        echo "AIRFLOW_POSTGRES_SCHEMA_CONFIG=${{ secrets.AIRFLOW_POSTGRES_SCHEMA_CONFIG }}" >> .env
        echo "AIRFLOW__CORE__FERNET_KEY=${{ secrets.AIRFLOW__CORE__FERNET_KEY }}" >> .env
        echo "AIRFLOW__WEBSERVER__SECRET_KEY=${{ secrets.AIRFLOW__WEBSERVER__SECRET_KEY }}" >> .env
        echo "TG_BOT_TOKEN=${{ secrets.TG_BOT_TOKEN }}" >> .env
        echo "TG_CHAT_ID=${{ secrets.TG_CHAT_ID }}" >> .env

    - name: Show public IP of GitHub Actions runner
      run: curl -s https://api.ipify.org

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # - name: Install Docker Compose
    #   run: sudo apt-get update && sudo apt-get install -y docker-compose

    - name: Run unit tests
      run: pytest tests/test_scripts.py

    - name: Spin up Docker environment
      run: |
        docker compose up -d
        sleep 45  # รอ service ขึ้นก่อน เช่น airflow + postgres ##อนาคตจะเปลี่ยนไปใช้วิธีรอแบบอื่นที่ดีกว่านี้

    - name: Download Cloud SQL Auth Proxy
      run: |
        curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
        chmod +x cloud_sql_proxy

    - name: Write GCP credentials to file
      run: |
        echo "${{ secrets.GCP_CREDENTIALS }}" > credentials.json

    - name: Start Cloud SQL Proxy
      run: |
        ./cloud_sql_proxy -instances=gcp-cloud-sql-postgresql:asia-southeast1:my-postgres-db=tcp:5432 &

    - name: Run E2E tests
      run: pytest tests/test_e2e_pipeline.py

  #CD
  deploy:
    # needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Docker image
      run: |
       IMAGE_NAME=ghcr.io/$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]'):latest
       docker build \
         --build-arg AIRFLOW_CONN_DB=${{ secrets.AIRFLOW_CONN_DB }} \
         --build-arg AIRFLOW__CORE__EXECUTOR=${{ secrets.AIRFLOW__CORE__EXECUTOR }} \
         -t $IMAGE_NAME .
       docker push $IMAGE_NAME
